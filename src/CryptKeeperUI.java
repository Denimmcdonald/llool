
/**
 *
 * @author mdmye
 */

import java.io.*;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;

public class CryptKeeperUI extends javax.swing.JFrame {

    ArrayList<User> storage = new ArrayList<User>();

    /**
     * Creates new form CryptKeeperUI
     */
    public CryptKeeperUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cryptkeeperProgramTab = new javax.swing.JTabbedPane();
        loginTab = new javax.swing.JPanel();
        logintoCKLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        registerLabel = new javax.swing.JLabel();
        registerUsername = new javax.swing.JLabel();
        registerTextField = new javax.swing.JTextField();
        registerPasswordLabel = new javax.swing.JLabel();
        registerPasswordField = new javax.swing.JPasswordField();
        registerButton = new javax.swing.JButton();
        registryConfirmationLabel = new javax.swing.JLabel();
        loginConfirmationLabel = new javax.swing.JLabel();
        encryptionTab = new javax.swing.JPanel();
        encryptTitleLabel = new javax.swing.JLabel();
        textToBeEncryptedLabel = new javax.swing.JLabel();
        encryptOrLabel = new javax.swing.JLabel();
        textToEncryptTextField = new javax.swing.JTextField();
        uploadFileEncryptionLabel = new javax.swing.JLabel();
        fileToEncryptTextField = new javax.swing.JTextField();
        encryptBrowseButton = new javax.swing.JButton();
        encryptResultsLabel = new javax.swing.JLabel();
        encryptFileSavedLabel = new javax.swing.JLabel();
        encryptFileSavedTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        encryptResultsTextArea = new javax.swing.JTextArea();
        encryptButton = new javax.swing.JButton();
        encryptResetButton = new javax.swing.JButton();
        encryptionMethodLabel = new javax.swing.JLabel();
        encryptionMethodComboBox = new javax.swing.JComboBox<>();
        encryptionKeyLabel = new javax.swing.JLabel();
        encryptionKeyTextField = new javax.swing.JTextField();
        decryptionTab = new javax.swing.JPanel();
        decryptionTitleLabel = new javax.swing.JLabel();
        textToBeDecryptedLabel = new javax.swing.JLabel();
        decryptOrLabel = new javax.swing.JLabel();
        textToDecryptTextField = new javax.swing.JTextField();
        uploadFileDecryptionLabel = new javax.swing.JLabel();
        fileToDecryptTextField = new javax.swing.JTextField();
        decryptBrowseButton = new javax.swing.JButton();
        decryptResultsLabel = new javax.swing.JLabel();
        decryptFileSavedLabel = new javax.swing.JLabel();
        decryptFileSavedTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        decryptResultsTextArea = new javax.swing.JTextArea();
        decryptButton = new javax.swing.JButton();
        decryptResetButton = new javax.swing.JButton();
        decryptMethodLabel = new javax.swing.JLabel();
        decryptComboBox = new javax.swing.JComboBox<>();
        decryptKeyLabel = new javax.swing.JLabel();
        decryptKeyTextField = new javax.swing.JTextField();
        userManagementTab = new javax.swing.JPanel();
        userManagementTitle = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        userManagementTable = new javax.swing.JTable();
        addUserButton = new javax.swing.JButton();
        deleteUserButton = new javax.swing.JButton();
        messagesLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        logintoCKLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        logintoCKLabel.setText("Login to CryptKeeper");

        usernameLabel.setText("Username:");

        usernameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTextFieldActionPerformed(evt);
            }
        });

        passwordLabel.setText("Password:");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("-or-");

        registerLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        registerLabel.setText("Register");

        registerUsername.setText("Username:");

        registerPasswordLabel.setText("Password:");

        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loginTabLayout = new javax.swing.GroupLayout(loginTab);
        loginTab.setLayout(loginTabLayout);
        loginTabLayout.setHorizontalGroup(
            loginTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginTabLayout.createSequentialGroup()
                .addGroup(loginTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginTabLayout.createSequentialGroup()
                        .addGap(317, 317, 317)
                        .addComponent(loginButton))
                    .addGroup(loginTabLayout.createSequentialGroup()
                        .addGap(233, 233, 233)
                        .addGroup(loginTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(registerPasswordLabel)
                            .addComponent(registerLabel)
                            .addComponent(passwordLabel)
                            .addComponent(usernameLabel)
                            .addComponent(logintoCKLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(usernameTextField)
                            .addComponent(passwordField)
                            .addComponent(registerUsername)
                            .addComponent(registerTextField)
                            .addComponent(registerPasswordField)))
                    .addGroup(loginTabLayout.createSequentialGroup()
                        .addGap(302, 302, 302)
                        .addComponent(registerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(registryConfirmationLabel))
                    .addGroup(loginTabLayout.createSequentialGroup()
                        .addGap(283, 283, 283)
                        .addComponent(loginConfirmationLabel))
                    .addGroup(loginTabLayout.createSequentialGroup()
                        .addGap(322, 322, 322)
                        .addComponent(jLabel1)))
                .addContainerGap(275, Short.MAX_VALUE))
        );
        loginTabLayout.setVerticalGroup(
            loginTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logintoCKLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginButton)
                .addGap(10, 10, 10)
                .addComponent(loginConfirmationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(registerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(registerUsername)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(registerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(registerPasswordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(registerPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registryConfirmationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(117, Short.MAX_VALUE))
        );

        cryptkeeperProgramTab.addTab("Login", loginTab);

        encryptTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        encryptTitleLabel.setText("CryptKeeper Encryption");

        textToBeEncryptedLabel.setText("Enter Text to be Encrypted:");

        encryptOrLabel.setText("-or-");

        textToEncryptTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textToEncryptTextFieldActionPerformed(evt);
            }
        });

        uploadFileEncryptionLabel.setText("Upload File to be Encrypted:");

        encryptBrowseButton.setText("Browse");
        encryptBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptBrowseButtonActionPerformed(evt);
            }
        });

        encryptResultsLabel.setText("Encryption Results:");

        encryptFileSavedLabel.setText("Encrypted File Sent To:");

        encryptResultsTextArea.setColumns(20);
        encryptResultsTextArea.setRows(5);
        jScrollPane1.setViewportView(encryptResultsTextArea);

        encryptButton.setText("Encrypt");
        encryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptButtonActionPerformed(evt);
            }
        });

        encryptResetButton.setText("Reset");
        encryptResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptResetButtonActionPerformed(evt);
            }
        });

        encryptionMethodLabel.setText("Choose Encryption Method:");

        encryptionMethodComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AES", "DES" }));
        encryptionMethodComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptionMethodComboBoxActionPerformed(evt);
            }
        });

        encryptionKeyLabel.setText("Key:");

        javax.swing.GroupLayout encryptionTabLayout = new javax.swing.GroupLayout(encryptionTab);
        encryptionTab.setLayout(encryptionTabLayout);
        encryptionTabLayout.setHorizontalGroup(
            encryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encryptionTabLayout.createSequentialGroup()
                .addGroup(encryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(encryptionTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(encryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(encryptionTabLayout.createSequentialGroup()
                                .addGroup(encryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(uploadFileEncryptionLabel)
                                    .addComponent(encryptResultsLabel)
                                    .addComponent(textToBeEncryptedLabel)
                                    .addComponent(encryptFileSavedLabel))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(textToEncryptTextField)
                            .addComponent(encryptFileSavedTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, encryptionTabLayout.createSequentialGroup()
                                .addGroup(encryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(encryptionTabLayout.createSequentialGroup()
                                        .addComponent(encryptionMethodLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(encryptionMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(19, 19, 19)
                                        .addGroup(encryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(encryptionTabLayout.createSequentialGroup()
                                                .addComponent(encryptButton)
                                                .addGap(144, 144, 144)
                                                .addComponent(encryptResetButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 183, Short.MAX_VALUE))
                                            .addGroup(encryptionTabLayout.createSequentialGroup()
                                                .addComponent(encryptionKeyLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(encryptionKeyTextField))))
                                    .addComponent(fileToEncryptTextField))
                                .addGap(18, 18, 18)
                                .addComponent(encryptBrowseButton))))
                    .addGroup(encryptionTabLayout.createSequentialGroup()
                        .addGroup(encryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(encryptionTabLayout.createSequentialGroup()
                                .addGap(232, 232, 232)
                                .addComponent(encryptTitleLabel))
                            .addGroup(encryptionTabLayout.createSequentialGroup()
                                .addGap(361, 361, 361)
                                .addComponent(encryptOrLabel)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        encryptionTabLayout.setVerticalGroup(
            encryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encryptionTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(encryptTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textToBeEncryptedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textToEncryptTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encryptOrLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uploadFileEncryptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(encryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileToEncryptTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(encryptBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(encryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptionMethodLabel)
                    .addComponent(encryptionMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(encryptionKeyLabel)
                    .addComponent(encryptionKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(encryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptButton)
                    .addComponent(encryptResetButton))
                .addGap(7, 7, 7)
                .addComponent(encryptResultsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encryptFileSavedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encryptFileSavedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        cryptkeeperProgramTab.addTab("Encryption", encryptionTab);

        decryptionTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        decryptionTitleLabel.setText("CryptKeeper Decryption");

        textToBeDecryptedLabel.setText("Enter Text to be Decrypted:");

        decryptOrLabel.setText("-or-");

        textToDecryptTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textToDecryptTextFieldActionPerformed(evt);
            }
        });

        uploadFileDecryptionLabel.setText("Upload File to be Decrypted:");

        decryptBrowseButton.setText("Browse");
        decryptBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptBrowseButtonActionPerformed(evt);
            }
        });

        decryptResultsLabel.setText("Decryption Results:");

        decryptFileSavedLabel.setText("Decrypted File Sent To:");

        decryptResultsTextArea.setColumns(20);
        decryptResultsTextArea.setRows(5);
        jScrollPane3.setViewportView(decryptResultsTextArea);

        decryptButton.setText("Decrypt");
        decryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptButtonActionPerformed(evt);
            }
        });

        decryptResetButton.setText("Reset");
        decryptResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptResetButtonActionPerformed(evt);
            }
        });

        decryptMethodLabel.setText("Decryption Method:");

        decryptComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AES", "DES" }));

        decryptKeyLabel.setText("Decryption Key:");

        javax.swing.GroupLayout decryptionTabLayout = new javax.swing.GroupLayout(decryptionTab);
        decryptionTab.setLayout(decryptionTabLayout);
        decryptionTabLayout.setHorizontalGroup(
            decryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(decryptionTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(decryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textToDecryptTextField)
                    .addComponent(decryptFileSavedTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, decryptionTabLayout.createSequentialGroup()
                        .addGroup(decryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(decryptionTabLayout.createSequentialGroup()
                                .addComponent(decryptMethodLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(decryptComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(decryptKeyLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(decryptKeyTextField))
                            .addComponent(fileToDecryptTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(decryptBrowseButton))
                    .addGroup(decryptionTabLayout.createSequentialGroup()
                        .addGroup(decryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(uploadFileDecryptionLabel)
                            .addComponent(decryptResultsLabel)
                            .addComponent(decryptFileSavedLabel)
                            .addGroup(decryptionTabLayout.createSequentialGroup()
                                .addGap(205, 205, 205)
                                .addComponent(decryptionTitleLabel))
                            .addComponent(textToBeDecryptedLabel)
                            .addGroup(decryptionTabLayout.createSequentialGroup()
                                .addGap(324, 324, 324)
                                .addComponent(decryptOrLabel))
                            .addGroup(decryptionTabLayout.createSequentialGroup()
                                .addGap(192, 192, 192)
                                .addComponent(decryptButton)
                                .addGap(150, 150, 150)
                                .addComponent(decryptResetButton)))
                        .addGap(0, 250, Short.MAX_VALUE)))
                .addContainerGap())
        );
        decryptionTabLayout.setVerticalGroup(
            decryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(decryptionTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(decryptionTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textToBeDecryptedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textToDecryptTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decryptOrLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uploadFileDecryptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(decryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileToDecryptTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decryptBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(decryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decryptMethodLabel)
                    .addComponent(decryptComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decryptKeyLabel)
                    .addComponent(decryptKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(decryptionTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decryptButton)
                    .addComponent(decryptResetButton))
                .addGap(18, 18, 18)
                .addComponent(decryptResultsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decryptFileSavedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decryptFileSavedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        cryptkeeperProgramTab.addTab("Decryption", decryptionTab);

        userManagementTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        userManagementTitle.setText("User Management");

        userManagementTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Password"
            }
        ));
        jScrollPane2.setViewportView(userManagementTable);

        addUserButton.setText("Add");
        addUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserButtonActionPerformed(evt);
            }
        });

        deleteUserButton.setText("Delete");
        deleteUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout userManagementTabLayout = new javax.swing.GroupLayout(userManagementTab);
        userManagementTab.setLayout(userManagementTabLayout);
        userManagementTabLayout.setHorizontalGroup(
            userManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userManagementTabLayout.createSequentialGroup()
                .addGap(264, 264, 264)
                .addComponent(userManagementTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(userManagementTabLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(userManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(addUserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteUserButton, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                    .addComponent(messagesLabel))
                .addGap(0, 221, Short.MAX_VALUE))
        );
        userManagementTabLayout.setVerticalGroup(
            userManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userManagementTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userManagementTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(userManagementTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(userManagementTabLayout.createSequentialGroup()
                        .addComponent(addUserButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteUserButton)
                        .addGap(47, 47, 47)
                        .addComponent(messagesLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        cryptkeeperProgramTab.addTab("User Management", userManagementTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cryptkeeperProgramTab)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cryptkeeperProgramTab)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textToEncryptTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textToEncryptTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textToEncryptTextFieldActionPerformed

    private void encryptBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptBrowseButtonActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setFileFilter(filter);

        int returnValue = jfc.showOpenDialog(null);
        // int returnValue = jfc.showSaveDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            fileToEncryptTextField.setText(selectedFile.getAbsolutePath());
            //System.out.println(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_encryptBrowseButtonActionPerformed

    private void textToDecryptTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textToDecryptTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textToDecryptTextFieldActionPerformed

    private void decryptBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptBrowseButtonActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setFileFilter(filter);
        
        int returnValue = jfc.showOpenDialog(null);
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            fileToDecryptTextField.setText(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_decryptBrowseButtonActionPerformed

    private void usernameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameTextFieldActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        User user = new User(usernameTextField.getText(), passwordField.getText());

        for (int i = 0; i < storage.size(); i++) {
            if (user.equals(storage.get(i))) {
                loginConfirmationLabel.setText("You are now logged in to CryptKeeper.");
                break;
            } else {
                loginConfirmationLabel.setText("Please try again or register below.");
            }
        }

        usernameTextField.setText("");
        passwordField.setText("");

    }//GEN-LAST:event_loginButtonActionPerformed

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        // TODO add your handling code here:
        //ArrayList<User> storage = new ArrayList<User>();
        User newUser = new User(registerTextField.getText(), registerPasswordField.getText());
        storage.add(newUser);
        registryConfirmationLabel.setText("User Added!");

        Object[] row = {newUser.getUsername(), newUser.getPassword()};

        DefaultTableModel model = (DefaultTableModel) userManagementTable.getModel();

        model.addRow(row);

        registryConfirmationLabel.setText("User Added!");

        registerTextField.setText("");
        registerPasswordField.setText("");
    }//GEN-LAST:event_registerButtonActionPerformed

    private void addUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserButtonActionPerformed
        // TODO add your handling code here:
        //ArrayList<User> storage = new ArrayList<User>();
        String username = JOptionPane.showInputDialog("Username: ");
        String password = JOptionPane.showInputDialog("Password: ");
        User newUser = new User(username, password);
        storage.add(newUser);
        messagesLabel.setText("User Added! Click Refresh to Update.");

        Object[] row = {newUser.getUsername(), newUser.getPassword()};

        DefaultTableModel model = (DefaultTableModel) userManagementTable.getModel();

        model.addRow(row);

        messagesLabel.setText("");
    }//GEN-LAST:event_addUserButtonActionPerformed

    private void deleteUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) this.userManagementTable.getModel();
        int[] rows = userManagementTable.getSelectedRows();
        for (int i = 0; i < rows.length; i++) {
            model.removeRow(rows[i] - i);
        }
    }//GEN-LAST:event_deleteUserButtonActionPerformed

    private void encryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptButtonActionPerformed
        // TODO add your handling code here:

        //If key is missing, throw error
        if (!encryptionKeyTextField.getText().isEmpty() || encryptionMethodComboBox.getSelectedIndex() == 1) {

            //Encrypt from Text Field
            if (!textToEncryptTextField.getText().isEmpty()) {
                final String key = encryptionKeyTextField.getText();
                String originalString = textToEncryptTextField.getText();
                String encryptedString = "";

                //AES Method
                if (encryptionMethodComboBox.getSelectedIndex() == 0) {
                    encryptedString = AES.encrypt(originalString, key);
                    //System.out.println("AES");  debugging
                }
                //DES Method (Does not require user generated key!)
                if (encryptionMethodComboBox.getSelectedIndex() == 1) {
                    try {
                        encryptedString = DES.encrypt(originalString);
                    } catch (NoSuchAlgorithmException ex) {
                        Logger.getLogger(CryptKeeperUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //System.out.println(originalString);
                    //System.out.println(DES.encrypt(originalString)); debugging
                    //System.out.println("DES"); debugging
                }
                encryptResultsTextArea.setText(encryptedString);
            }

            //Encrypt from File
            if (!fileToEncryptTextField.getText().isEmpty()) {
                final String key = encryptionKeyTextField.getText();
                String encryptedFilePath = "";

                if (encryptionMethodComboBox.getSelectedIndex() == 0) {
                    try {
                        encryptedFilePath = AES.encryptFile(fileToEncryptTextField.getText(), key);

                    } catch (Exception ex) {
                        Logger.getLogger(CryptKeeperUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                if (encryptionMethodComboBox.getSelectedIndex() == 1) {
                    try {
                        encryptedFilePath = DES.encryptFile(fileToEncryptTextField.getText());
                    } catch (NoSuchAlgorithmException ex) {
                        Logger.getLogger(CryptKeeperUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(CryptKeeperUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                encryptFileSavedTextField.setText(encryptedFilePath);
            }

        } else {
            final JPanel frame = new JPanel();
            JOptionPane.showMessageDialog(frame, "You must enter a key before proceeding!");
        }

    }//GEN-LAST:event_encryptButtonActionPerformed

    private void decryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptButtonActionPerformed
        // TODO add your handling code here:

        //If key is missing, throw error
        if (!decryptKeyTextField.getText().isEmpty() || decryptComboBox.getSelectedIndex() == 1) {

            //Decrypt from Text Field
            if (!textToDecryptTextField.getText().isEmpty()) {
                final String key = decryptKeyTextField.getText();
                String originalString = textToDecryptTextField.getText();
                String decryptedString = null;

                //AES Method
                if (decryptComboBox.getSelectedIndex() == 0) {
                    decryptedString = AES.decrypt(originalString, key);
                }
                if (decryptComboBox.getSelectedIndex() == 1) {
                    try {
                        decryptedString = DES.decrypt(originalString);
                    } catch (NoSuchAlgorithmException ex) {
                        Logger.getLogger(CryptKeeperUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                decryptResultsTextArea.setText(decryptedString);
            }

            //Decrypt from File
            if (!fileToDecryptTextField.getText().isEmpty()) {
                final String key = decryptKeyTextField.getText();
                String decryptedFilePath = "";

                if (decryptComboBox.getSelectedIndex() == 0) {
                    try {
                        decryptedFilePath = AES.decryptFile(fileToDecryptTextField.getText(), key);

                    } catch (Exception ex) {
                        Logger.getLogger(CryptKeeperUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if(decryptComboBox.getSelectedIndex() == 1)
                {
                    try {
                        decryptedFilePath = DES.decryptFile(fileToDecryptTextField.getText());
                    } catch (NoSuchAlgorithmException ex) {
                        Logger.getLogger(CryptKeeperUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(CryptKeeperUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                decryptFileSavedTextField.setText(decryptedFilePath);
            }
        } else {
            final JPanel frame = new JPanel();
            JOptionPane.showMessageDialog(frame, "You must enter a key before proceeding!");
        }
    }//GEN-LAST:event_decryptButtonActionPerformed

    private void encryptResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptResetButtonActionPerformed
        // TODO add your handling code here:
        textToEncryptTextField.setText("");
        encryptFileSavedTextField.setText("");
        encryptResultsTextArea.setText("");
        encryptionKeyTextField.setText("");
        encryptFileSavedTextField.setText("");
        fileToEncryptTextField.setText("");
    }//GEN-LAST:event_encryptResetButtonActionPerformed

    private void decryptResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptResetButtonActionPerformed
        // TODO add your handling code here:
        textToDecryptTextField.setText("");
        decryptFileSavedTextField.setText("");
        decryptResultsTextArea.setText("");
        decryptKeyTextField.setText("");
        decryptFileSavedTextField.setText("");
        fileToDecryptTextField.setText("");
    }//GEN-LAST:event_decryptResetButtonActionPerformed

    private void encryptionMethodComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptionMethodComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_encryptionMethodComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CryptKeeperUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CryptKeeperUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CryptKeeperUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CryptKeeperUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CryptKeeperUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addUserButton;
    private javax.swing.JTabbedPane cryptkeeperProgramTab;
    private javax.swing.JButton decryptBrowseButton;
    private javax.swing.JButton decryptButton;
    private javax.swing.JComboBox<String> decryptComboBox;
    private javax.swing.JLabel decryptFileSavedLabel;
    private javax.swing.JTextField decryptFileSavedTextField;
    private javax.swing.JLabel decryptKeyLabel;
    private javax.swing.JTextField decryptKeyTextField;
    private javax.swing.JLabel decryptMethodLabel;
    private javax.swing.JLabel decryptOrLabel;
    private javax.swing.JButton decryptResetButton;
    private javax.swing.JLabel decryptResultsLabel;
    private javax.swing.JTextArea decryptResultsTextArea;
    private javax.swing.JPanel decryptionTab;
    private javax.swing.JLabel decryptionTitleLabel;
    private javax.swing.JButton deleteUserButton;
    private javax.swing.JButton encryptBrowseButton;
    private javax.swing.JButton encryptButton;
    private javax.swing.JLabel encryptFileSavedLabel;
    private javax.swing.JTextField encryptFileSavedTextField;
    private javax.swing.JLabel encryptOrLabel;
    private javax.swing.JButton encryptResetButton;
    private javax.swing.JLabel encryptResultsLabel;
    private javax.swing.JTextArea encryptResultsTextArea;
    private javax.swing.JLabel encryptTitleLabel;
    private javax.swing.JLabel encryptionKeyLabel;
    private javax.swing.JTextField encryptionKeyTextField;
    private javax.swing.JComboBox<String> encryptionMethodComboBox;
    private javax.swing.JLabel encryptionMethodLabel;
    private javax.swing.JPanel encryptionTab;
    private javax.swing.JTextField fileToDecryptTextField;
    private javax.swing.JTextField fileToEncryptTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel loginConfirmationLabel;
    private javax.swing.JPanel loginTab;
    private javax.swing.JLabel logintoCKLabel;
    private javax.swing.JLabel messagesLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JButton registerButton;
    private javax.swing.JLabel registerLabel;
    private javax.swing.JPasswordField registerPasswordField;
    private javax.swing.JLabel registerPasswordLabel;
    private javax.swing.JTextField registerTextField;
    private javax.swing.JLabel registerUsername;
    private javax.swing.JLabel registryConfirmationLabel;
    private javax.swing.JLabel textToBeDecryptedLabel;
    private javax.swing.JLabel textToBeEncryptedLabel;
    private javax.swing.JTextField textToDecryptTextField;
    private javax.swing.JTextField textToEncryptTextField;
    private javax.swing.JLabel uploadFileDecryptionLabel;
    private javax.swing.JLabel uploadFileEncryptionLabel;
    private javax.swing.JPanel userManagementTab;
    private javax.swing.JTable userManagementTable;
    private javax.swing.JLabel userManagementTitle;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
